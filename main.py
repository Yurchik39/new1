# –ò–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –º–æ–¥—É–ª–µ–π:
import requests

import VKLong.VKLong.object
from config import ACCEPTED_SEX, BOT_TOKEN
from db.database import *
from utils.keyboards import kbd_choice_sex, kbd_search
from VKLong.VKLong import Bot

# –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è:
user_token = input("–í–≤–µ–¥–∏—Ç–µ user-token, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –¥–ª—è –ø–æ–∏—Å–∫–∞ –ª—é–¥–µ–π: ")

bot = Bot(token=BOT_TOKEN)


def get_city_by_name(city_name: str) -> tuple:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ –∏ –∞–π–¥–∏ –≥–æ—Ä–æ–¥–∞ –ø–æ –µ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏—é –≤ –∫–æ—Ä—Ç–µ–∂–µ
    :param city_name: –ù–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞
    """
    response = requests.get(
        "https://api.vk.com/method/database.getCities",
        params={
            "q": city_name,
            "count": 1,
            "access_token": user_token,
            "v": 5.131,
        },
    ).json()['response']

    if response['count'] > 0:
        return (response['items'][0]['title'], response['items'][0]['id'])


def get_city_by_id(city_id: int) -> tuple:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ –∏ –∞–π–¥–∏ –≥–æ—Ä–æ–¥–∞ –ø–æ –µ–≥–æ –∞–π–¥–∏ –≤ –∫–æ—Ä—Ç–µ–∂–µ
    :param city_id: –ê–π–¥–∏ –≥–æ—Ä–æ–¥–∞
    """
    response = requests.get(
        "https://api.vk.com/method/database.getCitiesById",
        params={
            "city_ids": city_id,
            "access_token": user_token,
            "v": 5.131,
        },
    ).json()['response']

    return (response[0]['title'], response[0]['id'])


def search_user(user_id: int) -> dict:
    """
    –ò—â–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —É—á–∏—Ç—ã–≤–∞—è –µ–≥–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    :param user_id: –ê–π–¥–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä—ã–π –∏—â–µ—Ç –¥—Ä—É–≥–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞
    """
    preferred_sex = get_user(user_id, "preferred_sex")
    if preferred_sex == "female":
        preferred_sex = 1
    elif preferred_sex == "male":
        preferred_sex = 2

    age_from = int(get_user(user_id, 'preferred_age_from'))
    age_to = int(get_user(user_id, 'preferred_age_to'))
    offset = int(get_user(user_id, 'search_offset'))
    city = int(get_user(user_id, 'city'))

    response = requests.get(
        "https://api.vk.com/method/users.search",
        params={
            "offset": offset,
            "city": city,
            "sex": preferred_sex,
            "status": (1, 6),
            "age_from": age_from,
            "age_to": age_to,
            "access_token": user_token,
            "v": 5.131,
        },
    ).json()["response"]["items"][0]

    cur.execute(
        f"UPDATE main SET search_offset = search_offset + 1 WHERE user_id = {user_id}"
    )

    return response


def get_all_user_photos(user_id: int) -> dict:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –≤—Å–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    :param user_id: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å, —É –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω–∞–¥–æ –Ω–∞–π—Ç–∏ –≤—Å–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏
    """
    response = requests.get(
        "https://api.vk.com/method/photos.getAll",
        params={
            "owner_id": user_id,
            "extended": 1,
            "count": 100,
            "skip_hidden": 1,
            "access_token": user_token,
            "v": 5.131,
        },
    ).json()["response"]

    return response


# –ü–æ–ª—É—á–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π:
@bot.get_updates
def on_update(event):
    # –ï—Å–ª–∏ –Ω–æ–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ –ù–ï —è–≤–ª—è–µ—Ç—Å—è —Å–æ–æ–±—â–µ–Ω–∏–µ–º:
    if event.type != "message_new":
        return

    message = VKLong.VKLong.object.message_new(event.response)
    user_id: int = message.from_id
    # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –ù–ï –∏–∑ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π:
    if message.from_id > 2000000000:
        return

    text: str = message.text.lower()

    is_exists = is_user_exists(user_id)
    registration_stage = get_registration_stage(user_id)

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –∏ –Ω–µ —É–∫–∞–∑–∞–ª –Ω—É–∂–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ:
    if not is_exists:
        user_info: dict = bot.execute_api("users.get", {"user_id": user_id, "fields": "sex,city"})[0]
        username = user_info["first_name"]
        sex = user_info["sex"]
        city = user_info.get("city")
        if city is not None:
            city = city["id"]
        else:
            city = "NULL"

        # 0 - –Ω–µ —É–∫–∞–∑–∞–Ω, 1 - –∂–µ–Ω—Å–∫–∏–π, 2 - –º—É–∂—Å–∫–æ–π
        if sex == 0:
            sex = "NULL"
        elif sex == 1:
            sex = "female"
        elif sex == 2:
            sex = "male"

        register_user(user_id, username, sex, city)

        if sex != "NULL":
            # –ë–æ—Ç –æ–ø—Ä–µ–¥–µ–ª–∏–ª –ø–æ–ª, –ø–æ—Ç–æ–º—É —á—Ç–æ –æ–Ω –µ—Å—Ç—å –≤ –ø—Ä–æ—Ñ–∏–ª–µ
            set_registration_stage(user_id, "choice_preferred_sex")
            bot.answer(
                "üëã –ü—Ä–∏–≤–µ—Ç! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ VKinder!\n"
                "\n"
                "üëâ –í—ã–±–µ—Ä–∏ –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º—ã–π –ø–æ–ª, —Å –∫–æ—Ç–æ—Ä—ã–º —Ö–æ—á–µ—à—å –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è:",
                kbd_choice_sex,
            )
        else:
            # –ë–æ—Ç –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–∏–ª –ø–æ–ª, –ø–æ—Ç–æ–º—É —á—Ç–æ –æ–Ω —Å–∫—Ä—ã—Ç –≤ –ø—Ä–æ—Ñ–∏–ª–µ
            set_registration_stage(user_id, "choice_sex")
            bot.answer(
                "üëã –ü—Ä–∏–≤–µ—Ç! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ VKinder!\n"
                "\n"
                "üëâ –í—ã–±–µ—Ä–∏ —Å–≤–æ–π –ø–æ–ª –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ:",
                kbd_choice_sex,
            )
        commit_db()

    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:
    elif is_exists and registration_stage != 'finished':
        # –í—ã–±–æ—Ä —Å–≤–æ–µ–≥–æ –ø–æ–ª–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º:
        if registration_stage == "choice_sex":
            if text in ACCEPTED_SEX:
                if text == "–º—É–∂—Å–∫–æ–π":
                    update_user(user_id, "sex", "male")
                elif text == "–∂–µ–Ω—Å–∫–∏–π":
                    update_user(user_id, "sex", "female")

                set_registration_stage(user_id, "choice_preferred_sex")
                bot.answer(
                    "üëç –û—Ç–ª–∏—á–Ω–æ! –° —Ç–≤–æ–∏–º –ø–æ–ª–æ–º –æ–ø—Ä–µ–¥–µ–ª–∏–ª–∏—Å—å.\n"
                    "\n"
                    "üëâ –í—ã–±–µ—Ä–∏ –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º—ã–π –ø–æ–ª, —Å –∫–æ—Ç–æ—Ä—ã–º —Ö–æ—á–µ—à—å –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è: ",
                    kbd_choice_sex,
                )
                commit_db()
            else:
                bot.answer(
                    "ü§ö –£–ø—Å! –í—ã –≤—ã–±—Ä–∞–ª–∏ –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π –ø–æ–ª!\n"
                    "\n"
                    "üëâ –í—ã–±–µ—Ä–∏ –¥–æ—Å—Ç—É–ø–Ω—ã–π –ø–æ–ª –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ:",
                    kbd_choice_sex,
                )

        # –í—ã–±–æ—Ä –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º–æ–≥–æ –ø–æ–ª–∞:
        elif registration_stage == "choice_preferred_sex":
            if text in ACCEPTED_SEX:
                set_registration_stage(user_id, 'choice_preferred_age')
                if text == "–º—É–∂—Å–∫–æ–π":
                    update_user(user_id, 'preferred_sex', 'male')
                elif text == "–∂–µ–Ω—Å–∫–∏–π":
                    update_user(user_id, 'preferred_sex', 'female')
                bot.answer(
                    "üëç –û—Ç–ª–∏—á–Ω–æ! –° –ø—Ä–µ–ø–æ–¥—á–∏—Ç–∞–µ–º—ã–º –ø–æ–ª–æ–º –æ–ø—Ä–µ–¥–µ–ª–∏–ª–∏—Å—å!\n"
                    "\n"
                    "üëâ –¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏ –¥–∏–∞–ø–∞–∑–æ–Ω –≤–æ–∑—Ä–∞—Å—Ç–∞ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞:\n"
                    "(–Ω–∞–ø—Ä–∏–º–µ—Ä, –æ—Ç–ø—Ä–∞–≤—å —Å–æ–æ–±—â–µ–Ω–∏–µ: 20-25)"
                )
                commit_db()
            else:
                bot.answer(
                    "ü§ö –£–ø—Å! –í—ã –≤—ã–±—Ä–∞–ª–∏ –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º—ã–π –ø–æ–ª!\n"
                    "\n"
                    "üëâ –í—ã–±–µ—Ä–∏ –¥–æ—Å—Ç—É–ø–Ω—ã–π –ø–æ–ª –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–µ:",
                    kbd_choice_sex,
                )

        # –£–∫–∞–∑–∞–Ω–∏–µ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –ø–æ–∏—Å–∫–∞ –ø–æ –≤–æ–∑—Ä–∞—Å—Ç—É:
        elif registration_stage == "choice_preferred_age":
            try:
                minimal_age = int(text.split("-")[0])
                maximum_age = int(text.split("-")[1])
            except IndexError:
                bot.answer(
                    "ü§ö –£–ø—Å! –¢—ã –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ —É–∫–∞–∑–∞–ª(–∞) –¥–∏–∞–ø–∞–∑–æ–Ω –≤–æ–∑—Ä–∞—Å—Ç–∞!\n"
                    "\n"
                    "üëâ –û—Ç–ø—Ä–∞–≤—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–∏–¥–∞ 20-25, —á—Ç–æ–±—ã —É–∫–∞–∑–∞—Ç—å –≤–æ–∑—Ä–∞—Å—Ç –ø–æ–∏—Å–∫–∞:"
                )
                return

            if minimal_age > maximum_age:
                minimal_age, maximum_age = maximum_age, minimal_age

            if minimal_age < 18 or minimal_age > 99:
                bot.answer(
                    "ü§ö –£–ø—Å! –î–∏–∞–ø–∞–∑–æ–Ω –ø–æ–∏—Å–∫–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–µ –º–µ–Ω–µ–µ 18-—Ç–∏ –∏ –Ω–µ –±–æ–ª–µ–µ 99-—Ç–∏ –ª–µ—Ç!\n"
                    "\n"
                    "üëâ –û—Ç–ø—Ä–∞–≤—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–∏–¥–∞ 20-25, —á—Ç–æ–±—ã —É–∫–∞–∑–∞—Ç—å –≤–æ–∑—Ä–∞—Å—Ç –ø–æ–∏—Å–∫–∞:"
                )
                return

            try:
                update_user(user_id, "preferred_age_from", minimal_age)
                update_user(user_id, "preferred_age_to", maximum_age)
            except ValueError:
                bot.answer(
                    "ü§ö –£–ø—Å! –î–∏–∞–ø–∞–∑–æ–Ω –ø–æ–∏—Å–∫–∞ –¥–æ–ª–∂–µ–Ω —è–≤–ª—è—Ç—å—Å—è —Ü–µ–ª—ã–º —á–∏—Å–ª–æ–º!\n"
                    "\n"
                    "üëâ –û—Ç–ø—Ä–∞–≤—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤–∏–¥–∞ 20-25, —á—Ç–æ–±—ã —É–∫–∞–∑–∞—Ç—å –≤–æ–∑—Ä–∞—Å—Ç –ø–æ–∏—Å–∫–∞:"
                )
                return

            city = get_user(user_id, "city")
            if city == "NULL":
                set_registration_stage(user_id, "choice_preferred_city")
                bot.answer(
                    "üëç –û—Ç–ª–∏—á–Ω–æ, –≤—ã –≤—ã–±—Ä–∞–ª–∏ –≤–æ–∑—Ä–∞—Å—Ç —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞!\n"
                    "\n"
                    "üëâ –¢–µ–ø–µ—Ä—å —É–∫–∞–∂–∏ —Å–≤–æ–π –≥–æ—Ä–æ–¥:"
                )
            else:
                set_registration_stage(user_id, "finished")
                bot.answer(
                    "ü•≥ –û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å —Ç—ã –º–æ–∂–µ—à—å –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è VKinder!\n"
                    "\n"
                    'üëâ –ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É - "–ø–æ–∏—Å–∫", —á—Ç–æ–±—ã –Ω–∞–π—Ç–∏ –ø–æ–¥—Ö–æ–¥—è—â–µ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞!',
                    kbd_search,
                )

            commit_db()

        elif registration_stage == "choice_preferred_city":
            if len(text) > 30:
                bot.answer(
                    "ü§ö –£–ø—Å! –ù–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ!\n"
                    "\n"
                    "üëâ –ù–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –º–µ–Ω—å—à–µ 30 —Å–∏–º–≤–æ–ª–æ–≤, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑:"
                )
                return

            city = get_city_by_name(text)

            update_user(user_id, "city", city[1])
            commit_db()
            bot.answer(
                f"ü•≥ –û—Ç–ª–∏—á–Ω–æ, –≤—ã –≤—ã–±—Ä–∞–ª–∏ –≥–æ—Ä–æ–¥ {city[1]}! –¢–µ–ø–µ—Ä—å —Ç—ã "
                "–º–æ–∂–µ—à—å –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è VKinder!\n"
                "\n"
                'üëâ –ò—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É - "–ø–æ–∏—Å–∫", —á—Ç–æ–±—ã –Ω–∞–π—Ç–∏ –ø–æ–¥—Ö–æ–¥—è—â–µ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞!',
                kbd_search,
            )

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω:
    elif is_exists and registration_stage == "finished":
        if text != "–ø–æ–∏—Å–∫" and text != "üîé –ø–æ–∏—Å–∫":
            return

        while True:
            # –ü–æ–∏—Å–∫ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            finded_user_object = search_user(user_id)
            commit_db()

            is_profile_closed = finded_user_object["is_closed"]
            if is_profile_closed:
                return

            photos_object = get_all_user_photos(finded_user_object["id"])

            if photos_object["count"] < 3:
                pass

            # –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–π –∏ —Å—Å—ã–ª–∫–∏ –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:
            else:
                photo_dict = {}
                if photos_object["count"] > 100:
                    photos_object["count"] = 100
                for i in range(photos_object["count"]):
                    try:
                        photo_likes = photos_object["items"][i]["likes"]["count"]
                        photo_dict[
                            photo_likes
                        ] = f"photo{finded_user_object['id']}_{photos_object['items'][i]['id']}"
                    except:
                        break

                if photo_dict != {}:
                    attachment_list = ""

                    for _ in range(3):
                        attachment_list += f"{photo_dict[max(photo_dict)]},"
                        photo_dict.pop(max(photo_dict))

                    finded_user_id = finded_user_object['id']
                    first_name = finded_user_object['first_name']
                    last_name = finded_user_object['last_name']
                    finded_link = f"vk.com/id{finded_user_id}"

                    bot.answer(
                        "üëç –ù–∞–π–¥–µ–Ω –ø–æ–¥—Ö–æ–¥—è—â–∏–π –ø—Ä–æ—Ñ–∏–ª—å!\n"
                        "\n"
                        f"üèµ [id{finded_user_id}|{first_name} {last_name}]\n"
                        f"–°—Å—ã–ª–∫–∞: {finded_link}",
                        attachment=str(attachment_list),
                    )
                    break
